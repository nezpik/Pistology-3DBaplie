datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Container {
  id            String @id @default(cuid())
  containerId   String @unique
  bay           Int
  row           Int
  tier          Int
  size          String
  type          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  location           Location?
  history            History[]
  damageReports      DamageReport[]
  ediMessages        EdiMessage[]
  customsInspections CustomsInspection[]
  tasks              Task[]
  truckAppointments  TruckAppointment[]
}

model Task {
  id          String @id @default(cuid())
  title       String
  description String
  status      TaskStatus @default(PENDING)
  assignee    String
  container   Container? @relation(fields: [containerId], references: [id])
  containerId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([containerId])
}

model TruckAppointment {
  id              String @id @default(cuid())
  truckingCompany String
  driverName      String
  licensePlate    String
  appointmentTime DateTime
  status          AppointmentStatus @default(SCHEDULED)
  container       Container @relation(fields: [containerId], references: [id])
  containerId     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([containerId])
}

model EdiMessage {
  id          String @id @default(cuid())
  messageType String
  content     String
  container   Container @relation(fields: [containerId], references: [id])
  containerId String
  createdAt   DateTime @default(now())

  baplieMessage BaplieMessage?
  coarriMessage CoarriMessage?
  codecoMessage CodecoMessage?

  @@index([containerId])
}

model CustomsInspection {
  id          String @id @default(cuid())
  status      InspectionStatus @default(PENDING)
  notes       String
  inspectedBy String
  container   Container @relation(fields: [containerId], references: [id])
  containerId String
  createdAt   DateTime @default(now())

  @@index([containerId])
}

model DamageReport {
  id          String @id @default(cuid())
  description String
  reportedBy  String
  photos      String[]
  container   Container @relation(fields: [containerId], references: [id])
  containerId String
  createdAt   DateTime @default(now())

  @@index([containerId])
}

model Location {
  id          String @id @default(cuid())
  lat         Float
  lng         Float
  container   Container @relation(fields: [containerId], references: [id])
  containerId String @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model History {
  id          String @id @default(cuid())
  event       String
  description String
  container   Container @relation(fields: [containerId], references: [id])
  containerId String
  createdAt   DateTime @default(now())

  @@index([containerId])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum InspectionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

model BaplieMessage {
  id              String @id @default(cuid())
  ediMessage      EdiMessage @relation(fields: [ediMessageId], references: [id])
  ediMessageId    String @unique
  vesselName      String?
  voyageNumber    String?
  portOfLoading   String?
  portOfDischarge String?
  containers      BaplieContainer[]
}

model BaplieContainer {
  id              String @id @default(cuid())
  baplieMessage   BaplieMessage @relation(fields: [baplieMessageId], references: [id])
  baplieMessageId String
  containerId     String
  bay             Int
  row             Int
  tier            Int
  size            String
  type            String
  weight          Float?
}

model CoarriMessage {
  id              String @id @default(cuid())
  ediMessage      EdiMessage @relation(fields: [ediMessageId], references: [id])
  ediMessageId    String @unique
  vesselName      String?
  voyageNumber    String?
  movements       CoarriMovement[]
}

model CoarriMovement {
  id               String @id @default(cuid())
  coarriMessage    CoarriMessage @relation(fields: [coarriMessageId], references: [id])
  coarriMessageId  String
  containerId      String
  movementType     String // e.g., 'LOAD', 'DISCHARGE', 'SHIFT'
  stowageLocation  String?
  isoContainerType String?
}

model CodecoMessage {
  id            String @id @default(cuid())
  ediMessage    EdiMessage @relation(fields: [ediMessageId], references: [id])
  ediMessageId  String @unique
  gate          String?
  movements     CodecoMovement[]
}

model CodecoMovement {
  id                  String @id @default(cuid())
  codecoMessage       CodecoMessage @relation(fields: [codecoMessageId], references: [id])
  codecoMessageId     String
  containerId         String
  movementType        String // 'IN' or 'OUT'
  truckLicensePlate   String?
  isoContainerType    String?
}
